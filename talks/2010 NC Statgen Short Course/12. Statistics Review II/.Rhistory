sort(l)
adaptiveQuantile <- function(pvals) {
}
help(sort)
a=[2,3,1]
a=c(2,3,1)
sort(a)
a
a=sort(a)
a
range(1,2)
help(range)
help(grid)
help(by)
a
len(a)
length(a0
)
length(a)
zeros(1)
zeroes(1)
ones
vector(10)
a=vector(10)
a=vector(len=10)
a
a=0
a
a=vector(0,len=10)
min(1,2(
)
min(1,2)
min(1,2,-1)
adaptiveQuantile <- function(pvals) {  gamma.min=.05  pvals=sort(pvals)  n = length(a)  ecdf=((1:n)+1)/(n+1)  q = vector(length=n)  for (i=1:n) {    gamma=ecdf[i]    if (gamma>gamma.min) {      q(i)=min(1,pvals[i]/gamma)    } else {      q(i)=1    }  }  q = q*(1-log(gamma.min))  p = min(1,min(q))  adaptiveQuantile=p}
help(for)
help for
?for
)))
)
?
)
#
# bridge penalty#
P.bridge <- function(x) { abs(x)^gamma }#
d.bridge <- function(x) { sign(x)*gamma*abs(x)^(gamma-1) }#
#
# log-sum penalty of Candes#
P.logsum <- function(x) { log(1+abs(x)/epsiln) / log(1+1/epsiln) }#
d.logsum <- function(x) { (sign(x)/(abs(x)+epsiln)) / log(1+1/epsiln)  }#
#
# clipped l1 penalty#
P.clipped <- function(x) #
{	#
	(1/delta)*((abs(x)<delta)*abs(x) + (abs(x)>=delta)*delta);#
}#
#
d.clipped <- function(x) { #
	(abs(x)<delta)*sign(x)/delta#
}#
	#
	#
#
x=seq(-1,1,1/100)#
epsiln=0.1#
delta=0.25#
gamma=0.55#
#
pdf("~/Dropbox/Research/ADMIXTURE2/Paper/penalty-plots.pdf",width=5)#
par(mfrow=c(3,2))#
# bridge#
#par(mfrow=c(1,2))	#
plot(x,P.bridge(x),type='l')#
plot(x,d.bridge(x),type='l')#
#
# log-sum#
#par(mfrow=c(1,2))	#
plot(x,P.logsum(x),type='l')#
plot(x,d.logsum(x),type='l')#
#
# clipped#
#par(mfrow=c(1,2))	#
plot(x,P.clipped(x),type='l')#
plot(x,d.clipped(x),type='l')#
dev.off()#
#
#
#
#gamma=0.55#
#plot(x,P.bridge(x),type='l', col='red')#
#lines(x,P.logsum(x),col='blue')#
#legend(0.5,0.2,fill=c('red','blue'),c('bridge','logsum'))
const=log(1+1/.1)
conts
const
x= 0.3756222964280081
Sys.glob
files = Sys.glob("/mnt/calypso/Association/admixture/CV/hapmap3-*.out")
files
for file in files:
for file in files {
for (file in files) {
echo(file)
}
for (file in files) {
disp(file)
}
for (file in files) {
file
}
print("!")
for (file in files) {
print(file)
}
help(grep)
read("/mnt/calypso/Association/admixture/CV/hapmap3--1.out")
file("/etc/passwd")
open("/etc/passwd")
help(pipe)
readLines("/etc/passwd")
help(grep)
source("~/Dropbox/Research/ADMIXTURE2/R/cvAnalysis.R")
liens
lines
files
s=readLines("/etc/passwd")
s
grep("uucp", lins)
grep("uucp", lines)
s
grep("uucp", s)
grep("uucp", s,value=TRUE)
help(read.csv)
help(scanf)
grep("uucp", s,value=TRUE)
g=grep("uucp", s,value=TRUE)
strsplit(g)
strsplit(g,":")
help(read.table)
source("~/Dropbox/Research/ADMIXTURE2/R/cvAnalysis.R")
a=c(1,2)
a[0]
a[1]
source("~/Dropbox/Research/ADMIXTURE2/R/cvAnalysis.R")
files
f="/mnt/calypso/Association/admixture/CV/hapmap3-1.out"
source("~/Dropbox/Research/ADMIXTURE2/R/cvAnalysis.R")
help(strsplit)
source("~/Dropbox/Research/ADMIXTURE2/R/cvAnalysis.R")
a=c("1.2","0.3")
a
as.numeric(a)
data.frame
help(data.frame)
dir
dir()
ls()
help(ls)
.99^32
1-.99^32
82*66/(18*34)
help(subset)
help(|)
help(unlink)
"foo"+"bar"
"foo\
bar"
"foo
bar"
"foo"\
"foo" \
"foo"
?sprintf
 c("BD", "CHD", "HT", "IBD", "RA", "T1D", "T2D")) {
markov.cutoff[1], markov.cutoff[0], -log10(bonferroni.cutoff[0])
markov.cutoff
markov.cutoff=c(5,10)
bonferroni.cutoff=c(1,1)/1e7
markov.cutoff[1], markov.cutoff[0], -log10(bonferroni.cutoff[0])
markov.cutoff[1]
sprintf("Cutoffs for SS: %d (weak), %d (strong); for simple association: %f (strong).", markov.cutoff[1], markov.cutoff[0], -log10(bonferroni.cutoff[0]))
sprintf("Cutoffs for SS: %d (weak)", markov.cutoff[0])
help(sprintf)
sprintf("Cutoffs for SS: %d (weak)", int(markov.cutoff[0]))
sprintf("Cutoffs for SS: %d (weak)", integer(markov.cutoff[0]))
integer
integer(2)
sprintf("Cutoffs for SS: %d", integer(markov.cutoff[0]))
sprintf("Cutoffs for SS: %d", markov.cutoff[0])
markov.cutoff
sprintf("Cutoffs for SS: %d", 5)
sprintf("Cutoffs for SS: %d", as.integer(markov.cutoff[0]))
help(sprintf)
markov.cutoff[0]
markov.cutoff
markov.cutoff(0)
size(markov.cutoff)
dim(markov.cutoff)
type(markov.cutoff)
typeof(markov.cutoff)
markov.cutoff[1]
markov.cutoff[2]
 caption2 = sprintf("Cutoffs for SS: %d (weak), %d (strong); for simple association: %f (strong).", markov.cutoff[2], markov.cutoff[1], -log10(bonferroni.cutoff[1]))
caption2
?sort
0:40
1:30
a=c(1,2,3)
a[1]
?order
"\\foo"
"\\loo"
"\loo"
library(xtable)#
#
#
alpha.strong=.05#
alpha.weak=1#
alpha=c(alpha.strong,alpha.weak)#
#
#
base="/mnt/pearson/Sources/SS/WTCCC"#
#
allTraits =  c("BD", "CHD", "HT", "IBD", "RA", "T1D", "T2D");#
oneTrait = c("HT")#
#
for (trait in oneTrait) {#
  plotFile    = sprintf("%s/%s/%s-ss-Plot.out.gz",    base,trait,trait);#
  summaryFile = sprintf("%s/%s/%s-ss-Summary.out", base,trait,trait);#
#
  # determine cutoffs#
  l=readLines(file(summaryFile))#
  subsamples=as.integer(strsplit(grep("SUBSAMPLINGS PERFORMED",l,value=TRUE),":")[[1]][2])#
  q=as.numeric(strsplit(grep("MEAN NUMBER OF VARIABLES SELECTED",l,value=TRUE),":")[[1]][2])#
  p=as.integer(strsplit(grep("TOTAL VARIABLES",l,value=TRUE),":")[[1]][2])-1#
  bonferroni.cutoff=alpha/p#
  pi.thresh=(1/2)*((q^2)/(p*alpha)+1)#
  markov.cutoff=round(pi.thresh*subsamples)#
  print(markov.cutoff)#
  #
  # read plot file, make table#
  tbl=read.table(plotFile, skip=3)#
  names(tbl)=c("Index","SNP","Chr","BP","Inclusions","P.marginal","P.median","P.adaptive")#
  tbl$nLog10P = -log10(tbl$P.marginal)#
  tbl = subset(tbl, select=c("SNP","Chr","BP","Inclusions","nLog10P"));#
  #
  assoc.best = tbl[order(tbl$nLog10P,decreasing=TRUE),]#
  assoc.best = subset(assoc.best, (nLog10P>=-log10(bonferroni.cutoff[1])))#
  #  assoc.best = assoc.best[1:40,]#
  #
  ss.best = tbl[order(tbl$Inclusions, decreasing=TRUE),]#
  ss.best = subset(ss.best, (Inclusions>=min(markov.cutoff)))#
  #ss.best = ss.best[1:40,]#
#
  outputFile = sprintf("%s-tables.tex", trait)#
#
  ss.caption = sprintf("%s: Summary of SNPs found significant under stability selection, in rank order by inclusion count.  $-\\log_{10}(p)$ cutoff was %f.  Stability selection cutoffs were %d (strong), %d (weak).", trait, -log10(bonferroni.cutoff[1]), markov.cutoff[2], markov.cutoff[1])#
  ss.tbl = xtable(ss.best, label=sprintf("tbl:%s-ss-results", trait), caption=ss.caption)#
  print(ss.tbl, file=outputFile)#
  #
  assoc.caption = sprintf("%s: Summary of SNPs found significant under simple association, in rank order by $p$-value.  $-\\log_{10}(p)$ cutoff was %f.  Stability selection cutoffs were %d (strong), %d (weak).", trait, -log10(bonferroni.cutoff[1]), markov.cutoff[2], markov.cutoff[1])#
  assoc.tbl = xtable(assoc.best, label=sprintf("tbl:%s-assoc-results", trait), caption=assoc.caption)#
  print(assoc.tbl, file=outputFile, append=TRUE, include.rownames=FALSE, tabular.environment="longtable")#
  #
}
dim(tbl)
dim(assoc.best)
dim(ss.best)
ss.best
rows(ss.best)
nrow(ss.best)
?nrow
library(xtable)#
#
#
alpha.strong=.05#
alpha.weak=1#
alpha=c(alpha.strong,alpha.weak)#
#
#
base="/mnt/pearson/Sources/SS/WTCCC"#
#
allTraits =  c("BD", "CHD", "HT", "IBD", "RA", "T1D", "T2D");#
oneTrait = c("HT")#
#
for (trait in oneTrait) {#
  plotFile    = sprintf("%s/%s/%s-ss-Plot.out.gz",    base,trait,trait);#
  summaryFile = sprintf("%s/%s/%s-ss-Summary.out", base,trait,trait);#
#
  # determine cutoffs#
  l=readLines(file(summaryFile))#
  subsamples=as.integer(strsplit(grep("SUBSAMPLINGS PERFORMED",l,value=TRUE),":")[[1]][2])#
  q=as.numeric(strsplit(grep("MEAN NUMBER OF VARIABLES SELECTED",l,value=TRUE),":")[[1]][2])#
  p=as.integer(strsplit(grep("TOTAL VARIABLES",l,value=TRUE),":")[[1]][2])-1#
  bonferroni.cutoff=alpha/p#
  pi.thresh=(1/2)*((q^2)/(p*alpha)+1)#
  markov.cutoff=round(pi.thresh*subsamples)#
  print(markov.cutoff)#
  #
  # read plot file, make table#
  tbl=read.table(plotFile, skip=3)#
  names(tbl)=c("Index","SNP","Chr","BP","Inclusions","P.marginal","P.median","P.adaptive")#
  tbl$nLog10P = -log10(tbl$P.marginal)#
  tbl = subset(tbl, select=c("SNP","Chr","BP","Inclusions","nLog10P"));#
  #
  assoc.best = tbl[order(tbl$nLog10P,decreasing=TRUE),]#
  assoc.best = subset(assoc.best, (nLog10P>=-log10(bonferroni.cutoff[1])))#
  #  assoc.best = assoc.best[1:40,]#
  #
  ss.best = tbl[order(tbl$Inclusions, decreasing=TRUE),]#
  ss.best = subset(ss.best, (Inclusions>=min(markov.cutoff)))#
  #ss.best = ss.best[1:40,]#
#
  outputFile = sprintf("%s-tables.tex", trait)#
#
  if (nrow(ss.best>0)) {#
    ss.caption = sprintf("%s: Summary of SNPs found significant under stability selection, in rank order by inclusion count.  $-\\log_{10}(p)$ cutoff was %f.  Stability selection cutoffs were %d (strong), %d (weak).", trait, -log10(bonferroni.cutoff[1]), markov.cutoff[2], markov.cutoff[1])#
    ss.tbl = xtable(ss.best, label=sprintf("tbl:%s-ss-results", trait), caption=ss.caption)#
    print(ss.tbl, file=outputFile)#
  }#
  #
  assoc.caption = sprintf("%s: Summary of SNPs found significant under simple association, in rank order by $p$-value.  $-\\log_{10}(p)$ cutoff was %f.  Stability selection cutoffs were %d (strong), %d (weak).", trait, -log10(bonferroni.cutoff[1]), markov.cutoff[2], markov.cutoff[1])#
  assoc.tbl = xtable(assoc.best, label=sprintf("tbl:%s-assoc-results", trait), caption=assoc.caption)#
  print(assoc.tbl, file=outputFile, append=TRUE, include.rownames=FALSE, tabular.environment="longtable")#
  #
}
alpha=0.05
alpha=1
p=(350000/50)
p
sqrt(alpha*p)
X=rnorm(100)
X
Y=2*log(X)+3
X=rnorm(100)+10
Y=2*log(X)+3
plot(X,Y)
X=rnorm(100)+10
Y=2*X**2+3
plot(X,Y)
X=rnorm(100)
Y=2*X**2+3
plot(X,Y)
X=rnorm(100)#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln
plot(X,Y)
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
plot(X,Y)
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
plot(X,Y)#
#
plot(X**2,Y)
X**2
hist(X**2)
X**2<0.1
count(X**2<0.1)
sum(X**2<0.1)
X=runif(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
plot(X,Y)#
#
plot(X**2,Y)
plot(X,Y)
X=runif(100)#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
plot(X,Y)#
#
plot(X**2,Y)
plot(X,Y)
X=runif(100)
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
plot(X,Y)#
plot(X**2,Y)
plot(X,Y)
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before", width=3)#
plot(X,Y)#
dev.off()#
#
pdf("after", width=3)#
plot(X**2,Y)#
dev.off()
setwd("~/Dropbox")
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before", width=3)#
plot(X,Y)#
dev.off()#
#
pdf("after", width=3)#
plot(X**2,Y)#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf", width=3)#
plot(X,Y)#
dev.off()#
#
pdf("after.pdf", width=3)#
plot(X**2,Y)#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf", width=3,height=3)#
plot(X,Y)#
dev.off()#
#
pdf("after.pdf", width=3, height=3)#
plot(X**2,Y)#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf")#
plot(X,Y)#
dev.off()#
#
pdf("after.pdf")#
plot(X**2,Y)#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf")#
plot(X,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()#
#
pdf("after.pdf")#
plot(X**2,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf")#
plot(X,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()#
#
pdf("after.pdf")#
plot(X**2,Y)#
m=lm(Y~X**2)#
abline(m,col="red")#
dev.off()
pdf("after.pdf")#
plot(X**2,Y)#
m=lm(Y~(X**2))#
abline(m,col="red")#
dev.off()
pdf("after.pdf")#
plot(X**2,Y)#
m=lm((X**2),Y)#
abline(m,col="red")#
dev.off()
pdf("after.pdf")#
plot(X**2,Y)#
#m=lm((X**2),Y)#
#abline(m,col="red")#
m=lm(X,Y)#
abline(m,col="red")#
dev.off()
pdf("after.pdf")#
plot(X**2,Y)#
#m=lm((X**2),Y)#
#abline(m,col="red")#
ma=lm(X,Y)#
abline(ma,col="red")#
dev.off()
#
pdf("after.pdf")#
plot(X**2,Y)#
#m=lm((X**2),Y)#
#abline(m,col="red")#
ma=lm(Y~X)#
abline(ma,col="red")#
dev.off()
pdf("after.pdf")#
plot(X**2,Y)#
#m=lm((X**2),Y)#
#abline(m,col="red")#
ma=lm(Y~X**2)#
abline(ma,col="red")#
dev.off()
pdf("after.pdf")#
X2 = X**2#
plot(X2,Y)#
ma=lm(Y~X2)#
abline(ma,col="red")#
dev.off()
pdf("after.pdf")#
X2 = X**2#
plot(X2,Y,xlab=expr(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf")#
plot(X,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()#
#
pdf("after.pdf")#
X2 = X**2#
plot(X2,Y,xlab=expr(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")#
dev.off()
expr
expression(
X^2)
#
pdf("after.pdf")#
X2 = X**2#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")#
dev.off()
X2 = X**2#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")
X2 = X**2#
par(cex.lab=2)#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")
X2 = X**2#
par(cex.lab=1.5)#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")
X2 = X**2#
par(cex=1.5,cex.lab=1.5)#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")
#
pdf("after.pdf")#
X2 = X**2#
par(cex.lab=1.5)#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")#
dev.off()
pdf("before.pdf")#
par(cex.lab=1.5)#
plot(X,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
#mar#
#A numerical vector of the form c(bottom, left, top, right) which gives the number of lines of margin to be specified on the four sides of the plot. The default is c(5, 4, 4, 2) + 0.1.#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf")#
par(cex.lab=1.5, mar=c(0, 0, 4, 2) + 0.1)#
plot(X,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()#
#
pdf("after.pdf")#
X2 = X**2#
par(cex.lab=1.5)#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")#
dev.off()
pdf("before.pdf")#
par(cex.lab=1.5, mar=c(4, 4, 4, 2) + 0.1)#
plot(X,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
#mar#
#A numerical vector of the form c(bottom, left, top, right) which gives the number of lines of margin to be specified on the four sides of the plot. The default is c(5, 4, 4, 2) + 0.1.#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf")#
par(cex.lab=1.5, mar=c(4, 5, 2, 5) + 0.1)#
plot(X,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()#
#
pdf("after.pdf")#
X2 = X**2#
par(cex.lab=1.5)#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")#
dev.off()
setwd("~/Dropbox/Teaching/2010 NC Statgen Short Course/12. Statistics Review II/")#
#
#mar#
#A numerical vector of the form c(bottom, left, top, right) which gives the number of lines of margin to be specified on the four sides of the plot. The default is c(5, 4, 4, 2) + 0.1.#
#
X=rnorm(100)+1#
epsiln = rnorm(100,0.1)#
Y=3+2*X**2+epsiln#
#
pdf("before.pdf")#
par(cex.lab=1.5, mar=c(4, 5, 2, 5) + 0.1)#
plot(X,Y)#
m=lm(Y~X)#
abline(m,col="red")#
dev.off()#
#
pdf("after.pdf")#
X2 = X**2#
par(cex.lab=1.5, mar=c(4, 5, 2, 5) + 0.1)#
plot(X2,Y,xlab=expression(X^2))#
ma=lm(Y~X2)#
abline(ma,col="red")#
dev.off()
InsectSpray
InsectSprays
InsectSprays$Count
InsectSprays$count
x <- matrix(c(12, 5, 7, 7), nc = 2)
x
x <- matrix(c(104,10933,189,10845), nc = 2)
x
chisq.test(x)$p.value           # 0.4233
chisq.test(x)
help(chisq.test
)
chisq.test(x,correct=FALSE)
